/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.DishReadyBean;
import Beans.GetRecipeBean;
import Beans.TimeComputingBean;
import MyUtils.StringSlicer;
import Resto.Table;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import network.NetworkBasicServer;
import network.NetworkBasicClient;
/**
 *
 * @author Adrien
 */
public class MainCuisine extends javax.swing.JFrame {
    
    private NetworkBasicServer ServCuisine;
    private NetworkBasicClient ClientCuisine;
    private Properties prop;
    
    private GetRecipeBean recipeBean;
    private TimeComputingBean computingBean;
    private DishReadyBean readyBean;
    
    /**
     * @return the prop
     */
    public Properties getProp() {
        return prop;
    }

    /**
     * @param prop the prop to set
     */
    public void setProp(Properties prop) {
        this.prop = prop;
    }
    
    /**
     * Creates new form MainCuisine
     */
    public MainCuisine() {
        
        
        prop = new Properties();
        String outfile = System.getProperty("user.dir") + "\\config.properties";
        File monFile = new File(outfile);
        try
        {
            prop.load (new FileInputStream (monFile));
        }
        catch (FileNotFoundException e) { System.out.println("Fichier de propriétés non trouvé !"); }
        catch (IOException e) { System.out.println("Aie : " + e.getMessage()); }
        
        setTitle("Cuisine \"" + prop.getProperty("nomRestaurant") + "\" : ");
        initComponents();
        
        String outFile = System.getProperty("user.dir") + "\\Cuisine.data";
        File fichierTable = new File(outFile);
        
        Vector dataTable1 = null;
        Vector headertable1 = new Vector<String>(Arrays.asList("Quantité", "Plat", "Table", "Heure"));
        
        Vector dataTable2 = null;
        Vector headertable2 = new Vector<String>(Arrays.asList("Quantité", "Plat", "Table", "Heure Arr.", "En préparation", "à enlever", "Enlever"));
        
        DefaultTableModel model = (DefaultTableModel) tableCommandeRecue.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tableCommandeEnPrepa.getModel();
        
        try (ObjectInputStream input = new ObjectInputStream(new FileInputStream(fichierTable))) 
        {
            dataTable1 = (Vector)input.readObject();
            model.setDataVector(dataTable1, headertable1);
            
            dataTable2 = (Vector)input.readObject();
            model2.setDataVector(dataTable2, headertable2);
        } 
        catch (FileNotFoundException e) {
            System.err.println("Erreur fichier non trouvé! [" + e + "]");
        }
        catch (IOException io) {
            io.printStackTrace();
        } 
        catch (ClassNotFoundException ex) {
            Logger.getLogger(MainSalle.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ServCuisine = new NetworkBasicServer(Integer.parseInt(getProp().getProperty("Port1")), commandeRecueCheckBox);
        
        recipeBean = new GetRecipeBean();
        computingBean = new TimeComputingBean();
        readyBean = new DishReadyBean();
        
        recipeBean.addIngredientListener(computingBean);
        computingBean.addPropertyChangeListener(readyBean);
        
        TableModel modelTable = tableCommandeEnPrepa.getModel();
        modelTable.addTableModelListener(recipeBean);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandeRecueCheckBox = new javax.swing.JCheckBox();
        flecheLabel = new javax.swing.JLabel();
        commandeRecueLabel = new javax.swing.JLabel();
        listePlatCommandeLabel = new javax.swing.JLabel();
        commandeRecueButton = new javax.swing.JButton();
        scrollCommandeRecue = new javax.swing.JScrollPane();
        tableCommandeRecue = new javax.swing.JTable();
        PlatEnPreparationLabel = new javax.swing.JLabel();
        scrollCommandeEnPrepa = new javax.swing.JScrollPane();
        tableCommandeEnPrepa = new javax.swing.JTable();
        prevenirButton = new javax.swing.JButton();
        voirCommandeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png")).getImage());
        setMaximumSize(new java.awt.Dimension(0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(50, 50));

        commandeRecueCheckBox.setText("Commande reçue");
        commandeRecueCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        flecheLabel.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        flecheLabel.setText(">>");

        listePlatCommandeLabel.setText("Liste des plats de la commande :");

        commandeRecueButton.setText("Commande reçue !");
        commandeRecueButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        commandeRecueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandeRecueButtonActionPerformed(evt);
            }
        });

        tableCommandeRecue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantité", "Plat", "Table", "Heure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollCommandeRecue.setViewportView(tableCommandeRecue);

        PlatEnPreparationLabel.setText("Plats en préparation :");

        tableCommandeEnPrepa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantité", "Plat", "Table", "Heure arr.", "En préparation", "A enlever", "Enlevé"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollCommandeEnPrepa.setViewportView(tableCommandeEnPrepa);

        prevenirButton.setText("Prévenir plats à enlever");
        prevenirButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        prevenirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevenirButtonActionPerformed(evt);
            }
        });

        voirCommandeButton.setText("Voir commande");
        voirCommandeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        voirCommandeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voirCommandeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flecheLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandeRecueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(prevenirButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollCommandeEnPrepa, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PlatEnPreparationLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commandeRecueCheckBox)
                                .addGap(37, 37, 37)
                                .addComponent(voirCommandeButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(listePlatCommandeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(commandeRecueButton))
                                .addComponent(scrollCommandeRecue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandeRecueCheckBox)
                    .addComponent(voirCommandeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandeRecueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flecheLabel))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listePlatCommandeLabel)
                    .addComponent(commandeRecueButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollCommandeRecue, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PlatEnPreparationLabel)
                .addGap(21, 21, 21)
                .addComponent(scrollCommandeEnPrepa, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(prevenirButton)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        listePlatCommandeLabel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voirCommandeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voirCommandeButtonActionPerformed
        // TODO add your handling code here:
        if(ClientCuisine == null)
            ClientCuisine = new NetworkBasicClient("localhost", Integer.parseInt(getProp().getProperty("Port2")));
        
        String message = ServCuisine.getMessage();
        commandeRecueLabel.setText(message);
        DefaultTableModel model = (DefaultTableModel) tableCommandeRecue.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tableCommandeEnPrepa.getModel();
        
        StringSlicer ligne = new StringSlicer(message, "/");
        List<String> ligneMessage = ligne.listComponents();
        String numTable = ligneMessage.get(0);
        String heure = ligneMessage.get(ligneMessage.size()-1);
        for(int i=1; i<ligneMessage.size()-1; i++)
        {
            Vector<String> ligneTableau = new Vector();
            StringSlicer slice = new StringSlicer(ligneMessage.get(i), "*:");
            ligneTableau.add(slice.listComponents().get(2));
            ligneTableau.add(slice.listComponents().get(0));
            ligneTableau.add(numTable);
            ligneTableau.add(heure);
            
            Vector ligneTableau2 = new Vector(ligneTableau);
            ligneTableau2.add(false);
            ligneTableau2.add(false);
            ligneTableau2.add(false);
            
            model.addRow(ligneTableau);
            model2.addRow(ligneTableau2);
        }
        saveTables();
    }//GEN-LAST:event_voirCommandeButtonActionPerformed

    private void commandeRecueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandeRecueButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCommandeEnPrepa.getModel();
        String message = "";
        
        for(Object i : model.getDataVector())
        {
            //System.out.println("tmp = " + i);
            Vector tmp = (Vector)i;
            if(tmp.get(4) != null && (boolean)tmp.get(4) == true)
            {
                message += tmp.get(1).toString() + "@" + tmp.get(2) + "@" + ":";
            }
        }
        
        
        ServCuisine.sendMessage(message);
        saveTables();
    }//GEN-LAST:event_commandeRecueButtonActionPerformed

    private void prevenirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevenirButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCommandeEnPrepa.getModel();
        String message = "";
        
        
        for(int i= 0; i < model.getRowCount(); i++)
        {
            if(model.getValueAt(i, 5) != null && (boolean)model.getValueAt(i, 5) == true)
            {
                message += model.getValueAt(i, 0).toString() + ":" + model.getValueAt(i, 1) + ",";
            }
        }
        if(message.equals(""))
            JOptionPane.showMessageDialog(this, "Aucune commande à enlever");
        else
            ClientCuisine.sendStringWithoutWaiting(message);
        
        saveTables();
    }//GEN-LAST:event_prevenirButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCuisine().setVisible(true);
            }
        });
    }
    
    private void saveTables()
    {
        String outFile = System.getProperty("user.dir") + "\\Cuisine.data";
        File fichierTable = new File(outFile);
        DefaultTableModel model = (DefaultTableModel) tableCommandeRecue.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tableCommandeEnPrepa.getModel();
        Vector dataTable1 = model.getDataVector();
        Vector dataTable2 = model2.getDataVector();
        try (ObjectOutputStream input = new ObjectOutputStream(new FileOutputStream(fichierTable))) 
        {
             input.writeObject(dataTable1);
             input.flush();
             input.writeObject(dataTable2);
             input.flush();
        }
        catch (FileNotFoundException e)
        {
            System.err.println("Erreur fichier non trouvé! [" + e + "]");
        }
        catch (IOException io) {
            io.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PlatEnPreparationLabel;
    private javax.swing.JButton commandeRecueButton;
    private javax.swing.JCheckBox commandeRecueCheckBox;
    private javax.swing.JLabel commandeRecueLabel;
    private javax.swing.JLabel flecheLabel;
    private javax.swing.JLabel listePlatCommandeLabel;
    private javax.swing.JButton prevenirButton;
    private javax.swing.JScrollPane scrollCommandeEnPrepa;
    private javax.swing.JScrollPane scrollCommandeRecue;
    private javax.swing.JTable tableCommandeEnPrepa;
    private javax.swing.JTable tableCommandeRecue;
    private javax.swing.JButton voirCommandeButton;
    // End of variables declaration//GEN-END:variables

    public void setVisible() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
